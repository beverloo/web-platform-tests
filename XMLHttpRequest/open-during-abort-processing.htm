<!doctype html>
<title>XMLHttpRequest: open() during abort processing - abort() called from onloadstart</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<div id="log"></div>
<script>
      var test = async_test()
      var client = new XMLHttpRequest(), test_state = 1, log = []
      var expected = [
        "onloadstart readyState before abort() 1",
        "onreadystatechange readyState before open() 4", /* this event is triggered from the abort(), readyState is now 4 */
        "onreadystatechange readyState after open() 1",
        "onloadstart readyState 1", /* should this fire *after* abort() returns, like IE does? Or at this point, like Gecko does? */
        "client.onabort 1", /* open question whether this should fire at all.. and if it does, so should upload.onabort - no? */
        "readyState after abort() 1", /* abort() call returns when open() has already set readyState to 1 */
        "client.onload 4" /* second request succeeds */
      ]

      client.upload.onabort = test.step_func(function () {
        log.push('upload.onabort ' + client.readyState)
      })

      client.upload.onloadend = test.step_func(function () {
        log.push('upload.onloadend ' + client.readyState)
      })

      client.onabort = test.step_func(function () {
        log.push('client.onabort ' + client.readyState)
      })

      client.onloadstart = function(){
        if(test_state === 1){
          test_state = 2
          log.push('onloadstart readyState before abort() ' + client.readyState)
          client.abort() // This will trigger an abort event
          log.push('readyState after abort() ' + client.readyState)
        }else{
          log.push('onloadstart readyState ' + client.readyState)
        }
      }

      client.onload = test.step_func(function(){
        log.push('client.onload ' + client.readyState)
        assert_array_equals(log, expected)
        test.done()
      })

      client.onreadystatechange = test.step_func(function() {
          if(test_state === 2){ // this readystatechange event is fired due to the abort() algorithm
            // this, if enabled, would also test #dom-xmlhttprequest-abort step following::ol/li[2]/ol/li[1]
            //assert_equals(client.readyState, client.DONE, 'abort() should first set readyState to DONE')
            test_state = 3
            log.push('onreadystatechange readyState before open() ' + client.readyState)
            client.open("GET", "resources/content.py")
            log.push('onreadystatechange readyState after open() ' + client.readyState)
            client.send(null)
          }
      })

      client.open("POST", "resources/content.py")
      client.send('abcd')
    </script>
